{"version":3,"file":"player.js","sourceRoot":"","sources":["../../src/classes/player.ts"],"names":[],"mappings":"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","sourcesContent":["import { AudioPlayer, AudioPlayerPlayingState, AudioPlayerStatus as Status, AudioResource, createAudioPlayer, createAudioResource, getVoiceConnection, StreamType } from '@discordjs/voice';\nimport { Readable } from 'node:stream';\nimport { TypedEmitter } from 'tiny-typed-emitter';\nimport { PlayerEvents } from '../interfaces/events';\nimport { PlayOptions } from '../interfaces/interfaces';\nimport { DisPlayConnection } from './connection';\n\n/**\n * The audio player class of `discord-play`.\n * \n * Must be created only after a voice connection is\n * established, either through a {@link DisPlayConnection} instance or the @discordjs/voice\n * `joinVoiceChannel` function.\n */\nexport class DisPlayPlayer extends TypedEmitter<PlayerEvents> {\n\n    /**\n     * The {@link AudioPlayer} instance from @discordjs/voice.\n     */\n    public readonly player = createAudioPlayer();\n\n    /**\n     * Stores previous volume amount before muting the player, which can be restored back\n     * when unmuting the player.\n     */\n    private volumeCache: number | null = null;\n\n    /**\n     * Attaches logic to the audio player and binds it to the voice connection.\n     * @param guildId - The ID of the guild where the voice connection is established.\n     */\n    constructor(guildId: string) {\n        super();\n        const connection = getVoiceConnection(guildId);\n        if (!connection) throw new Error(\"no active voice connection found in specified guild\");\n        this.player.on('stateChange', (oldState, newState) => {\n            switch (newState.status) {\n                case Status.Buffering: this.emit('audioPlayerBuffer', oldState, newState); break;\n                case Status.Idle: this.emit('audioPlayerFinish', oldState, newState); break;\n                case Status.Paused: this.emit('audioPlayerPause', oldState, newState); break;\n                case Status.AutoPaused: this.emit('audioPlayerAutoPause', oldState, newState); break;\n                case Status.Playing:\n                    switch (oldState.status) {\n                        case Status.Buffering: this.emit('audioPlayerStart', oldState, newState); break;\n                        case Status.Paused: this.emit('audioPlayerResume', oldState, newState); break;\n                        default: break;\n                    }\n                    break;\n                default: break;\n            }\n        });\n        this.player.on('error', error => void this.emit('error', error));\n        try {\n            connection.subscribe(this.player);\n        } catch (error: any) {\n            this.emit('error', error);\n        }\n    }\n\n    /**\n     * Plays the input audio resource, and any previously playing resource gets destroyed and replaced.\n     * @param resource - The audio resouce.\n     */\n    public play(resource: AudioResource): void;\n\n    /**\n     * Plays from input source provided.\n     * @param source - Can be either :\n     * - Audio url i.e. local path or a url with audio endpoint (will require ffmpeg).\n     * - Readable stream of audio data.\n     * @param options - {@link PlayOptions}\n     */\n    public play(source: string | Readable, options?: PlayOptions): void;\n\n    public play(source: string | Readable | AudioResource, options?: PlayOptions) {\n        try {\n            if (source instanceof AudioResource) {\n                this.player.play(source);\n            } else {\n                const resource = createAudioResource(source, {\n                    inputType: options?.streamType ?? StreamType.Arbitrary,\n                    inlineVolume: options?.volume ? true : false\n                });\n                if (options?.volume) resource.volume?.setVolume(options.volume);\n                this.player.play(resource);\n            }\n        } catch (error: any) {\n            this.emit('error', error);\n        }\n    }\n\n    /**\n     * Stops the audio player and destroys any underlying resource.\n     * @returns `true` if the player will come to a stop, otherwise `false`.\n     */\n    public stop() {\n        return this.player.stop();\n    }\n\n    /**\n     * Pauses/unpauses the audio player.\n     * @returns `true` if player is paused, else `false` i.e. unpaused.\n     */\n    public togglePause() {\n        switch (this.player.state?.status) {\n            case Status.Playing: return this.player.pause(true);\n            case Status.Paused: return !this.player.unpause();\n            default: return false;\n        }\n    }\n\n    /**\n     * Returns the amount of volume in percentage (0 to 100) of the player resource.\n     * @remarks\n     * Returns percentage of volume else undefined if player doesn't have any underlying resource\n     * or resource doesn't have inline volume enabled (has 100% volume).\n     */\n    public get volume() {\n        if (this.player.state.status !== Status.Idle) {\n            const vol = this.player.state.resource.volume?.volume\n            return vol ? vol * 100 : vol;\n        }\n        return undefined;\n    }\n\n    /**\n     * Changes volume of the underlying resource of the player.\n     * @param volume - Percentage of volume to set (0 to 100).\n     * @returns `true` if volume is changed successfully, otherwise `false`.\n     * \n     * @remarks\n     * Works only when inline volume of resource was enabled.\n     */\n    public setVolume(volume: number) {\n        if (this.isVolumeChangeable()) {\n            (this.player.state as AudioPlayerPlayingState).resource.volume!.setVolume(volume / 100);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Mutes/Unmutes the audio player.\n     * @returns `true` if player was muted, otherwise `false`.\n     * \n     * @remarks\n     * Requires the currently playing audio resource to have inline volume enabled.\n     * \n     * @throws Error if resource doesn't have inline volume enabled.\n     */\n    public toggleMute() {\n        if (!this.isVolumeChangeable()) throw new Error(\"Unable to detect resource with inline volume enabled.\");\n        if (!this.volumeCache) {\n            this.volumeCache = this.volume ?? null;\n            this.setVolume(0);\n            return true;\n        } else {\n            this.setVolume(this.volumeCache);\n            this.volumeCache = null;\n            return false;\n        }\n    }\n\n    /**\n     * To detect if currently underlying resource (if any) has inline volume enabled or not.\n     * @returns `true` if inline volume is enabled, otherwise `false`.\n     */\n    private isVolumeChangeable() {\n        if (this.player.state.status !== Status.Idle) {\n            return this.player.state.resource.volume ? true : false;\n        }\n        return false;\n    }\n\n}"]}