{"version":3,"file":"connection.js","sourceRoot":"","sources":["../../src/classes/connection.ts"],"names":[],"mappings":";;;AAAA,4CAAwM;AAExM,2DAAkD;AAClD,+BAAiC;AAEjC,MAAM,IAAI,GAAG,IAAA,gBAAS,EAAC,UAAU,CAAC,CAAC;AAEnC;;;GAGG;AACH,MAAa,iBAAkB,SAAQ,iCAA8B;IAWjE;;;OAGG;IACH,YAAY,KAAiB;QACzB,KAAK,EAAE,CAAC;QATJ,cAAS,GAAG,KAAK,CAAC;QAUtB,IAAI,CAAC,KAAK,CAAC,OAAO;YAAE,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;QACtE,IAAI,CAAC,UAAU,GAAG,IAAA,wBAAgB,EAAC,EAAE,SAAS,EAAE,KAAK,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,cAAc,EAAE,KAAK,CAAC,KAAK,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAC9I,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC;QACvD,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,aAAa,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE;YAC3D,QAAQ,QAAQ,CAAC,MAAM,EAAE;gBACrB,KAAK,6BAAM,CAAC,KAAK;oBACb,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;oBACpD,MAAM;gBACV,KAAK,6BAAM,CAAC,SAAS;oBACjB,IAAI,CAAC,IAAI,CAAC,wBAAwB,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;oBACrD,MAAM;gBACV,KAAK,6BAAM,CAAC,YAAY;oBACpB,IAAI,QAAQ,CAAC,MAAM,KAAK,uCAAQ,CAAC,cAAc,IAAI,QAAQ,CAAC,SAAS,KAAK,IAAI,EAAE;wBAC5E,IAAA,mBAAW,EAAC,IAAI,CAAC,UAAU,EAAE,6BAAM,CAAC,UAAU,EAAE,IAAK,CAAC;6BACjD,IAAI,CAAC,GAAG,EAAE;4BACP,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;4BACxF,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC;wBAC3D,CAAC,CAAC;6BACD,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;qBACpG;yBAAM,IAAI,IAAI,CAAC,UAAU,CAAC,cAAc,GAAG,CAAC,EAAE;wBAC3C,MAAM,IAAI,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,cAAc,GAAG,IAAK,CAAC,CAAC;wBACrD,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;qBAC5B;yBAAM;wBACH,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;wBAC1B,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC;qBACrD;oBACD,MAAM;gBACV,KAAK,6BAAM,CAAC,UAAU,CAAC;gBACvB,KAAK,6BAAM,CAAC,UAAU;oBAClB,IAAI,IAAI,CAAC,SAAS;wBAAE,OAAO;oBAC3B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;oBACtB,MAAM,IAAA,mBAAW,EAAC,IAAI,CAAC,UAAU,EAAE,6BAAM,CAAC,KAAK,EAAE,KAAM,CAAC;yBACnD,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;yBAClC,KAAK,CAAC,KAAK,CAAC,EAAE;wBACX,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,KAAK,6BAAM,CAAC,SAAS,EAAE;4BACnD,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;4BAC1B,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC;yBACrD;wBACD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;oBAC3B,CAAC,CAAC,CAAC;oBACP,MAAM;aACb;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACH,IAAW,MAAM;;QACb,OAAO,MAAA,MAAC,IAAI,CAAC,UAAU,CAAC,KAAmC,0CAAE,YAAY,0CAAE,MAAM,CAAC;IACtF,CAAC;IAED;;;OAGG;IACI,YAAY;QACf,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,QAAQ,CAAC;QACjD,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC;QAC5C,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QACnD,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,CAAC;QAC/B,OAAO,CAAC,IAAI,CAAC;IACjB,CAAC;IAED;;;OAGG;IACI,UAAU;QACb,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,QAAQ,CAAC;QACjD,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC;QAC5C,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QACnD,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,CAAC;QAC7B,OAAO,CAAC,IAAI,CAAC;IACjB,CAAC;IAED;;OAEG;IACI,OAAO;QACV,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;IAC9B,CAAC;CAEJ;AApGD,8CAoGC","sourcesContent":["import { AudioPlayer, entersState, joinVoiceChannel, VoiceConnection, VoiceConnectionDisconnectReason as DCReason, VoiceConnectionReadyState, VoiceConnectionStatus as Status } from '@discordjs/voice';\nimport { VoiceState } from 'discord.js';\nimport { TypedEmitter } from 'tiny-typed-emitter';\nimport { promisify } from 'util';\nimport { ConnectionEvents } from '../interfaces/events';\nconst wait = promisify(setTimeout);\n\n/**\n * The voice connection class of `discord-play`. The bot joins the input voice state\n * as soon as an instance is created.\n */\nexport class DisPlayConnection extends TypedEmitter<ConnectionEvents> {\n\n    /**\n     * The {@link VoiceConnection} instance from @discordjs/voice.\n     */\n    public readonly connection: VoiceConnection;\n\n    private readyLock = false;\n\n    private oldVoiceID: string | null;\n\n    /**\n     * Joins the voice channel on instance creation.\n     * @param voice The voice state of a member. \n     */\n    constructor(voice: VoiceState) {\n        super();\n        if (!voice.channel) throw new Error(\"member voice channel not found\");\n        this.connection = joinVoiceChannel({ channelId: voice.channel.id, guildId: voice.guild.id, adapterCreator: voice.guild.voiceAdapterCreator });\n        this.oldVoiceID = this.connection.joinConfig.channelId;\n        this.connection.on('stateChange', async (oldState, newState) => {\n            switch (newState.status) {\n                case Status.Ready:\n                    this.emit('voiceConnectionCreate', this.oldVoiceID);\n                    break;\n                case Status.Destroyed:\n                    this.emit('voiceConnectionDestroy', this.oldVoiceID);\n                    break;\n                case Status.Disconnected:\n                    if (newState.reason === DCReason.WebSocketClose && newState.closeCode === 4014) {\n                        entersState(this.connection, Status.Connecting, 3_000)\n                            .then(() => {\n                                this.emit('voiceConnectionMove', this.oldVoiceID, this.connection.joinConfig.channelId);\n                                this.oldVoiceID = this.connection.joinConfig.channelId;\n                            })\n                            .catch(error => void this.emit('voiceConnectionKick', this.connection.joinConfig.channelId));\n                    } else if (this.connection.rejoinAttempts < 5) {\n                        await wait(++this.connection.rejoinAttempts * 3_000);\n                        this.connection.rejoin();\n                    } else {\n                        this.connection.destroy();\n                        this.emit('error', new Error(\"connection_error\"));\n                    }\n                    break;\n                case Status.Connecting:\n                case Status.Signalling:\n                    if (this.readyLock) return;\n                    this.readyLock = true;\n                    await entersState(this.connection, Status.Ready, 20_000)\n                        .then(() => this.readyLock = false)\n                        .catch(error => {\n                            if (this.connection.state.status !== Status.Destroyed) {\n                                this.connection.destroy();\n                                this.emit('error', new Error(\"connection_error\"));\n                            }\n                            this.readyLock = false;\n                        });\n                    break;\n            }\n        });\n    }\n\n    /**\n     * The {@link AudioPlayer} attached to the voice connection (if any).\n     */\n    public get player() {\n        return (this.connection.state as VoiceConnectionReadyState)?.subscription?.player;\n    }\n\n    /**\n     * Toggle self-deafening of the bot.\n     * @returns `true` if self-deafened, otherwise `false` i.e. self-undeafened.\n     */\n    public toggleDeafen() {\n        const flag = this.connection.joinConfig.selfDeaf;\n        this.connection.joinConfig.selfDeaf = !flag;\n        this.connection.rejoin(this.connection.joinConfig);\n        this.emit('selfDeafen', !flag);\n        return !flag;\n    }\n\n    /**\n     * Toggle self-muting of the bot.\n     * @returns `true` if self-muted, otherwise `false` i.e. self-unmuted.\n     */\n    public toggleMute() {\n        const flag = this.connection.joinConfig.selfMute;\n        this.connection.joinConfig.selfMute = !flag;\n        this.connection.rejoin(this.connection.joinConfig);\n        this.emit('selfMute', !flag);\n        return !flag;\n    }\n\n    /**\n     * Destroys the voice connection, making it unable to be reused again.\n     */\n    public destroy() {\n        this.connection.destroy();\n    }\n\n}"]}