{"version":3,"file":"events.js","sourceRoot":"","sources":["../../src/interfaces/events.ts"],"names":[],"mappings":"","sourcesContent":["import { AudioPlayerState } from '@discordjs/voice';\n\n/**\n * The events emitted from DisPlayConnection class.\n */\nexport interface ConnectionEvents {\n\n    /**\n     * The event when a voice channel is joined successfully.\n     * @param voiceId - The ID of the joined voice channel.\n     */\n    voiceConnectionCreate: (voiceId: string | null) => void;\n\n    /**\n     * The event when bot is moved from one voice channel to another.\n     * @param oldVoiceId - The ID of the previous voice channel.\n     * @param newVoiceId - The ID of the new voice channel.\n     */\n    voiceConnectionMove: (oldVoiceId: string | null, newVoiceId: string | null) => void;\n\n    /**\n     * The event when bot is manually kicked from a voice channel.\n     * @param voiceId - The ID of the voice channel from where the bot was kicked.\n     * @remarks May take upto 3 seconds for event to fire after the bot is kicked.\n     */\n    voiceConnectionKick: (voiceId: string | null) => void;\n\n    /**\n     * The event when a voice channel is left due to manual disconnection,\n     * kicked or due to some error.\n     * @param voiceId - The ID of voice channel which was left.\n     */\n    voiceConnectionDestroy: (voiceId: string | null) => void;\n\n    /**\n     * The event when deafening status of bot gets changed.\n     * @param flag - If true, bot is deafened and hence is unable to receive audio else undeafened.\n     */\n    selfDeafen: (flag: boolean) => void;\n\n    /**\n     * \n     */\n    selfMute: (flag: boolean) => void;\n\n    /**\n     * The event when connection emits an error.\n     * @param error - The error info.\n     */\n    error: (error: Error) => void;\n}\n\n/**\n * The events emitted from DisPlayPlayer class.\n */\nexport interface PlayerEvents {\n\n    /**\n     * The event when player transitions into buffering state while loading the resource.\n     * @param oldState - The previous audio player state.\n     * @param newState - The newer audio player state.\n     */\n\n    audioPlayerBuffer: (oldState: AudioPlayerState, newState: AudioPlayerState) => void;\n    /**\n     * The event when player starts playing a resource after buffering it.\n     * @param oldState - The previous audio player state.\n     * @param newState - The newer audio player state.\n     */\n    audioPlayerStart: (oldState: AudioPlayerState, newState: AudioPlayerState) => void;\n\n    /**\n     * The event when the player finishes playing a resource.\n     * @param oldState - The previous audio player state.\n     * @param newState - The newer audio player state.\n     */\n    audioPlayerFinish: (oldState: AudioPlayerState, newState: AudioPlayerState) => void;\n\n    /**\n     * The event when the player was manually paused.\n     * @param oldState - The previous audio player state.\n     * @param newState - The newer audio player state.\n     */\n    audioPlayerPause: (oldState: AudioPlayerState, newState: AudioPlayerState) => void;\n\n    /**\n     * The event when the player was manually resumed from the paused state.\n     * @param oldState - The previous audio player state.\n     * @param newState - The newer audio player state.\n     */\n    audioPlayerResume: (oldState: AudioPlayerState, newState: AudioPlayerState) => void;\n\n    /**\n     * The event when the player goes into paused state if noSubscriberBehaviour is set to autopaused.\n     * @param oldState - The previous audio player state.\n     * @param newState - The newer audio player state.\n     * \n     * @remarks This event should probably never occur.\n     */\n    audioPlayerAutoPause: (oldState: AudioPlayerState, newState: AudioPlayerState) => void;\n\n    /**\n     * The event when player emits an error.\n     * @param error - The error info.\n     */\n    error: (error: Error) => void;\n}"]}