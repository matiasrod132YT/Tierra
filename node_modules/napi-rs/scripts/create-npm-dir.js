"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateNpmDirCommand = void 0;
const tslib_1 = require("tslib");
const path_1 = require("path");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const clipanion_1 = require("clipanion");
const lodash_1 = require("lodash");
const consts_1 = require("./consts");
const debug_1 = require("./debug");
const spawn_1 = require("./spawn");
const utils_1 = require("./utils");
const debug = debug_1.debugFactory('create-npm-dir');
class CreateNpmDirCommand extends clipanion_1.Command {
    execute() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const pkgJsonDir = path_1.join(this.targetDir, 'package.json');
            debug(`Read content from [${chalk_1.default.yellowBright(pkgJsonDir)}]`);
            const { platforms, muslPlatforms, packageName, version, binaryName, content, } = consts_1.getNapiConfig(pkgJsonDir);
            for (const platform of [...platforms, ...muslPlatforms]) {
                const targetDir = path_1.join(process.cwd(), this.targetDir, 'npm', platform);
                yield spawn_1.spawn(`mkdir -p ${targetDir}`);
                const binaryFileName = `${binaryName}.${platform}.node`;
                const targetPackageJson = path_1.join(targetDir, 'package.json');
                debug(`Write file [${chalk_1.default.yellowBright(targetPackageJson)}]`);
                yield utils_1.writeFileAsync(targetPackageJson, JSON.stringify(Object.assign({ name: `${packageName}-${platform}`, version, os: [platform.replace('-musl', '')], main: binaryFileName, files: [binaryFileName] }, lodash_1.pick(content, 'description', 'keywords', 'author', 'homepage', 'license', 'cpu', 'engines', 'publishConfig', 'repository', 'bugs')), null, 2));
                const targetReadme = path_1.join(targetDir, 'README.md');
                debug(`Write target README.md [${chalk_1.default.yellowBright(targetReadme)}]`);
                yield utils_1.writeFileAsync(targetReadme, readme(packageName, platform));
            }
        });
    }
}
tslib_1.__decorate([
    clipanion_1.Command.String('-t,--target'),
    tslib_1.__metadata("design:type", String)
], CreateNpmDirCommand.prototype, "targetDir", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Path('create-npm-dir'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", Promise)
], CreateNpmDirCommand.prototype, "execute", null);
exports.CreateNpmDirCommand = CreateNpmDirCommand;
function readme(packageName, platform) {
    return `# \`${packageName}-${platform}\`

This is the **${platform}** 64-bit binary for \`${packageName}\`
`;
}
//# sourceMappingURL=create-npm-dir.js.map