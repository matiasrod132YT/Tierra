"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArtifactsCommand = void 0;
const tslib_1 = require("tslib");
const path_1 = require("path");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const clipanion_1 = require("clipanion");
const fdir_1 = require("fdir");
const debug_1 = require("./debug");
const utils_1 = require("./utils");
const debug = debug_1.debugFactory('artifacts');
class ArtifactsCommand extends clipanion_1.Command {
    constructor() {
        super(...arguments);
        this.sourceDir = 'artifacts';
        this.targetDir = '.';
    }
    execute() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const api = new fdir_1.fdir()
                .withFullPaths()
                .exclude((dirPath) => dirPath.includes('node_modules'))
                .filter((filePath) => filePath.endsWith('package.json'))
                .crawl(path_1.join(process.cwd(), this.targetDir));
            const sourceApi = new fdir_1.fdir()
                .withFullPaths()
                .crawl(path_1.join(process.cwd(), this.sourceDir));
            const distDirs = yield api.withPromise().then((output) => output
                .map((packageJsonPath) => {
                var _a;
                const { dir } = path_1.parse(packageJsonPath);
                const { napi } = require(packageJsonPath);
                if (!napi) {
                    return null;
                }
                const napiName = (_a = napi === null || napi === void 0 ? void 0 : napi.name) !== null && _a !== void 0 ? _a : 'index';
                debug(`Scan dir: [${chalk_1.default.yellowBright(dir)}], napi name: ${chalk_1.default.greenBright(napiName)}`);
                return {
                    dir,
                    name: napiName,
                };
            })
                .filter(Boolean));
            yield sourceApi.withPromise().then((output) => Promise.all(output.map((filePath) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                var _a;
                debug(`Read [${chalk_1.default.yellowBright(filePath)}]`);
                const sourceContent = yield utils_1.readFileAsync(filePath);
                const parsedName = path_1.parse(filePath);
                const [fileName] = parsedName.name.split('.');
                const { dir } = (_a = distDirs.find(({ name }) => name === fileName)) !== null && _a !== void 0 ? _a : {};
                if (!dir) {
                    throw new TypeError(`No dist dir found for ${filePath}`);
                }
                const distFilePath = path_1.join(dir, parsedName.base);
                debug(`Write file content to [${chalk_1.default.yellowBright(distFilePath)}]`);
                yield utils_1.writeFileAsync(distFilePath, sourceContent);
            }))));
        });
    }
}
tslib_1.__decorate([
    clipanion_1.Command.String('-d,--dir'),
    tslib_1.__metadata("design:type", Object)
], ArtifactsCommand.prototype, "sourceDir", void 0);
tslib_1.__decorate([
    clipanion_1.Command.String('-t,--target'),
    tslib_1.__metadata("design:type", Object)
], ArtifactsCommand.prototype, "targetDir", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Path('artifacts'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", Promise)
], ArtifactsCommand.prototype, "execute", null);
exports.ArtifactsCommand = ArtifactsCommand;
//# sourceMappingURL=artifacts.js.map